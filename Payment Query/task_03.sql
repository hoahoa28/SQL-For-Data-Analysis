-- Task 1: Generate invoice reports
-- Adventure Works Cycles sells directly to retailers, who must be invoiced for their orders.
-- You have been tasked with writing a query to generate a list of invoices to be sent to
-- customers.
-- 1.1 Retrieve customer orders
-- o As an initial step towards generating the invoice report, write a query that returns the
-- company name from the SalesLT.Customer table, and the sales order ID and total
-- due from the SalesLT.SalesOrderHeader table.
select top 5 *
from SalesLT.Customer
select top 5 *
from SalesLT.SalesOrderHeader

SELECT CompanyName, SalesOrderID, TotalDue
FROM  SalesLT.SalesOrderHeader as OrHeader
INNER JOIN SalesLT.Customer as Cus
ON Cus.CustomerID = OrHeader.CustomerID

-- 1.2 Retrieve customer orders with addresses
-- o Extend your customer orders query to include the Main Office address for each
-- customer, including the full street address, city, state or province, postal code, and
-- country or region
-- o Tip: Note that each customer can have multiple addressees in
-- the SalesLT.Address table, so the database developer has created
-- the SalesLT.CustomerAddress table to enable a many-to-many relationship
-- between customers and addresses. Your query will need to include both of these
-- tables, and should filter the results so that only Main Office addresses are included.
select top 5 * from SalesLT.Customer
select top 5 * from SalesLT.Address
select top 5 * from SalesLT.CustomerAddress

SELECT CompanyName
    , SalesOrderID
    , TotalDue
    , CONCAT_WS(' ', AddressLine1, AddressLine2, City, StateProvince, PostalCode, CountryRegion) as MainOfficeAddress
FROM  SalesLT.SalesOrderHeader as OrHeader
INNER JOIN SalesLT.Customer as Cus
ON Cus.CustomerID = OrHeader.CustomerID
INNER JOIN SalesLT.CustomerAddress as CusAddr
ON Cus.CustomerID = CusAddr.CustomerID
INNER JOIN SalesLT.Address as Addr
ON CusAddr.AddressID = Addr.AddressID
WHERE AddressType = 'Main Office'

-- Task 2: Retrieve customer data

-- As you continue to work with the Adventure Works customer, product and sales data,
-- you must create queries for reports that have been requested by the sales team.
--   
--  
-- Retrieve a list of products
-- ○ A sales manager needs a list of ordered product with more information.
-- You must write a query that returns a list of product name (is generated by
-- the string preceded by the '-' character (example: HL Road Frame)), only
-- started selling in 2006, Product model name contains 'Road', CategoryName
-- contains 'Bikes'; and ListPrice value with integer part equal to 2443

select top 5 * from SalesLT.SalesOrderDetail
select top 5 * from SalesLT.Product
select top 5 * from SalesLT.ProductCategory
select top 5 * from SalesLT.ProductModel

SELECT SUBSTRING(product.Name, 1, CHARINDEX('-', product.Name) - 1) AS NewName
--select product.Name, SellStartDate, model.Name as modelName, category.Name as catName, ListPrice
FROM SalesLT.Product as product
INNER JOIN SalesLT.ProductCategory as category
ON product.ProductCategoryID = category.ProductCategoryID
INNER JOIN SalesLT.ProductModel as model 
ON product.ProductModelID = model.ProductModelID
WHERE (ProductID IN (SELECT DISTINCT ProductID FROM SalesLT.SalesOrderDetail))
      AND YEAR(SellStartDate) >= 2006
      AND model.Name LIKE '%Road%'
      AND category.Name LIKE '%Bike%'
      AND CAST(ListPrice AS INT) = 2443

-- 1.1 Retrieve a report that includes the following information: customer_id, transaction_id,
-- scenario_id, transaction_type, sub_category, category. These transactions must meet the
-- following conditions:
--  Were created in Jan 2019
--  Transaction type is not payment

select  * from dbo.fact_transaction_2019
select top 5 * from dbo.dim_scenario
select top 5 * from dbo.dim_payment_channel

SELECT customer_id
     , transaction_id
     , fact_19.scenario_id
     , transaction_type
     , sub_category
     , category
FROM dbo.fact_transaction_2019 AS fact_19 
INNER JOIN dbo.dim_scenario AS scenario 
ON fact_19.scenario_id = scenario.scenario_id
WHERE (YEAR(transaction_time) = 2019 AND MONTH(transaction_time) = 1)
      AND transaction_type != 'Payment'

-- 1.2 Retrieve a report that includes the following information: customer_id, transaction_id,
-- scenario_id, transaction_type, category, payment_method. These transactions must meet the
-- following conditions:
--  Were created from Jan to June 2019
--  Had category type is shopping
--  Were paid by Bank account
SELECT customer_id
     , transaction_id
     , fact_19.scenario_id
     , transaction_type
     , payment_method
     , category
FROM dbo.fact_transaction_2019 AS fact_19 
INNER JOIN dbo.dim_scenario AS scenario 
ON fact_19.scenario_id = scenario.scenario_id
INNER JOIN dbo.dim_payment_channel AS payment 
ON fact_19.payment_channel_id = payment.payment_channel_id
WHERE ((MONTH(transaction_time) >= 1) AND (MONTH(transaction_time) <= 6))
      AND category = 'Shopping'
      AND payment_method = 'Bank account'

-- 1.3 Retrieve a report that includes the following information: customer_id, transaction_id,
-- scenario_id, payment_method and payment_platform. These transactions must meet the
-- following conditions:
--  Were created in Jan 2019 and Jan 2020
--  Had payment platform is android
SELECT customer_id
     , transaction_id
     , fact_19.scenario_id
     , transaction_type
     , payment_method
     , payment_platform
    -- , transaction_time
FROM dbo.fact_transaction_2019 AS fact_19 
INNER JOIN dbo.dim_scenario AS scenario 
ON fact_19.scenario_id = scenario.scenario_id
INNER JOIN dbo.dim_payment_channel AS payment 
ON fact_19.payment_channel_id = payment.payment_channel_id
INNER JOIN dbo.dim_platform AS platform
ON fact_19.platform_id = platform.platform_id
WHERE (YEAR(transaction_time) = 2019 AND MONTH(transaction_time) = 1)
AND payment_platform = 'android'
UNION
SELECT customer_id
     , transaction_id
     , fact_20.scenario_id
     , transaction_type
     , payment_method
     , payment_platform
   --  , transaction_time
FROM dbo.fact_transaction_2020 AS fact_20
INNER JOIN dbo.dim_scenario AS scenario 
ON fact_20.scenario_id = scenario.scenario_id
INNER JOIN dbo.dim_payment_channel AS payment 
ON fact_20.payment_channel_id = payment.payment_channel_id
INNER JOIN dbo.dim_platform AS platform
ON fact_20.platform_id = platform.platform_id
WHERE (YEAR(transaction_time) = 2020 AND MONTH(transaction_time) = 1)
AND payment_platform = 'android'

-- 1.4 Retrieve a report that includes the following information: customer_id, transaction_id,
-- scenario_id, payment_method and payment_platform. These transactions must meet the
-- following conditions: (Hard)
--  Include all transactions of the customer group created in January 2019 (Group A) and
-- additional transactions of this customers (Group A) continue to make transactions in
-- January 2020.
--  Payment platform is iOS
SELECT customer_id
     , transaction_id
     , fact_20.scenario_id
     , payment_method
     , payment_platform
     , transaction_time
FROM dbo.fact_transaction_2020 AS fact_20
--INNER JOIN dbo.dim_scenario AS scenario 
--ON fact_20.scenario_id = scenario.scenario_id
INNER JOIN dbo.dim_payment_channel AS payment 
ON fact_20.payment_channel_id = payment.payment_channel_id
INNER JOIN dbo.dim_platform AS platform
ON fact_20.platform_id = platform.platform_id
WHERE (customer_id IN (SELECT customer_id
                      FROM dbo.fact_transaction_2019
                      WHERE (YEAR(transaction_time) = 2019 AND MONTH(transaction_time) = 1))
      AND ((YEAR(transaction_time) = 2020 AND MONTH(transaction_time) = 1)))
AND payment_platform = 'ios'
ORDER BY customer_id ASC

